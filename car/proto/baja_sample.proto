syntax = "proto3";

import "nanopb.proto";

// Single sample with differential timestamp
message Sample {
  uint32 channel_id = 1 [(nanopb).int_size = IS_8];  // ADC channel ID (uint8)
  uint32 value = 2;                                  // Raw ADC value (24-bit)
  uint32 timestamp_delta = 3 [(nanopb).int_size = IS_16];  // Microseconds since base timestamp (uint16)
}

// Fixed-size batch with differential timestamps
message FixedDataChunk {
  fixed64 base_timestamp = 1;  // Base timestamp in microseconds
  repeated Sample samples = 2 [(nanopb).max_count = 50, (nanopb).fixed_count = true];
  uint32 sample_count = 3 [(nanopb).int_size = IS_16];  // Actual number of valid samples (uint16)
}

// Verbose batch with full timestamps
message VerboseDataChunk {
  repeated fixed64 timestamps = 1 [(nanopb).max_count = 50, (nanopb).fixed_count = true];
  repeated uint32 channel_ids = 2 [(nanopb).max_count = 50, (nanopb).fixed_count = true, (nanopb).int_size = IS_8];
  repeated uint32 values = 3 [(nanopb).max_count = 50, (nanopb).fixed_count = true];
  uint32 sample_count = 4 [(nanopb).int_size = IS_16];  // Actual number of valid samples (uint16)
}

// Master data chunk that can contain either a fixed or verbose chunk
message DataChunk {
  oneof chunk_type {
    FixedDataChunk fixed = 1;
    VerboseDataChunk verbose = 2;
  }
}